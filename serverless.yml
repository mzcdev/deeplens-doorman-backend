# Welcome to Serverless!

service: deeplens-doorman-backend

provider:
  name: aws
  runtime: python3.7

  region: ${env:AWSREGION}

  memorySize: 2560
  timeout: 20

  # you can overwrite defaults here
  stage: demo

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "rekognition:DetectFaces"
        - "rekognition:SearchFacesByImage"
        - "rekognition:IndexFaces"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${env:STORAGE_NAME}/*"
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${env:AWSREGION}:*:*"

  # you can define service wide environment variables here
  environment:
    AWSREGION: ${env:AWSREGION}
    SLACK_API_TOKEN: ${env:SLACK_API_TOKEN}
    SLACK_CHANNEL_ID: ${env:SLACK_CHANNEL_ID}
    STORAGE_NAME: ${env:STORAGE_NAME}
    TABLE_USERS: ${env:TABLE_USERS}
    TABLE_HISTORY: ${env:TABLE_HISTORY}

functions:
  guess:
    handler: handler.guess
    events:
      - s3:
          bucket: ${env:STORAGE_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: incoming/
  unknown:
    handler: handler.unknown
    events:
      - s3:
          bucket: ${env:STORAGE_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: unknown/
  train:
    handler: handler.train
    events:
      - http:
          path: train
          method: post
  users:
    handler: handler.users
    events:
      - http:
          path: users
          method: get
  clean:
    handler: handler.clean
    events:
      - schedule: cron(0 20 * * ? *)

resources:
  Resources:
    # S3Bucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${env:STORAGE_NAME}
    #     LifecycleConfiguration:
    #       Rules:
    #         - ExpirationInDays: 3
    #           Prefix: "/"
    #           Status: Enabled
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:TABLE_USERS}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: latest
            AttributeType: N
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          # - AttributeName: latest
          #   KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        LocalSecondaryIndexes:
          - IndexName: latest_index
            KeySchema:
              # - AttributeName: user_id
              #   KeyType: HASH
              - AttributeName: latest
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - user_id
              ProjectionType: INCLUDE
        # GlobalSecondaryIndexes:
        #   - IndexName: users_index
        #     KeySchema:
        #       - AttributeName: user_id
        #         KeyType: HASH
        #       - AttributeName: latest
        #         KeyType: RANGE
        #     Projection:
        #       NonKeyAttributes:
        #         - user_id
        #       ProjectionType: INCLUDE
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnits: 1
    historyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:TABLE_HISTORY}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: visited
            AttributeType: N
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: visited
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # LocalSecondaryIndexes:
        #   - IndexName: myLSI
        #     KeySchema:
        #       - AttributeName: user_id
        #         KeyType: HASH
        #       - AttributeName: visited
        #         KeyType: RANGE
        #     Projection:
        #       NonKeyAttributes:
        #         - Artist
        #       ProjectionType: INCLUDE
        # GlobalSecondaryIndexes:
        #   - IndexName: history_index
        #     KeySchema:
        #       - AttributeName: user_id
        #         KeyType: HASH
        #       - AttributeName: visited
        #         KeyType: RANGE
        #     Projection:
        #       ProjectionType: KEYS_ONLY
        #     ProvisionedThroughput:
        #       ReadCapacityUnits: 1
        #       WriteCapacityUnits: 1

plugins:
  - serverless-python-requirements
